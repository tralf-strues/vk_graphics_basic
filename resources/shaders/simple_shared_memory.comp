#version 430

#define WORK_GROUP_SIZE 32
#define KERNEL_SIZE 7

layout( local_size_x = WORK_GROUP_SIZE ) in;

layout( push_constant ) uniform params {
  uint len;
} PushConstant;

layout(std430, binding = 0) buffer readonly Input
{
    float array[];
};

layout(std430, binding = 1) buffer writeonly Output
{
    float result[];
};

shared float prefixSum[WORK_GROUP_SIZE];

void main() 
{
    uint localIdx     = uint(gl_LocalInvocationID.x);
    uint globalIdx    = uint(gl_GlobalInvocationID.x);
    uint workGroupIdx = uint(gl_WorkGroupID.x);

    uint n = uint(PushConstant.len);

    if (globalIdx < n)
    {
        float curConvolution = 0.0;

        for (int windowOffset = -KERNEL_SIZE / 2; windowOffset <= KERNEL_SIZE / 2; ++windowOffset)
        {
            int idx = int(globalIdx) + windowOffset;

            if (idx >= 0 && idx < int(n))
            {
                curConvolution += array[idx];
            }
        }

        curConvolution /= float(KERNEL_SIZE);
        prefixSum[localIdx] = array[globalIdx] - curConvolution;

        barrier();

        for (uint i = 1; i < WORK_GROUP_SIZE; i <<= 1)
        {
            if (localIdx + i < WORK_GROUP_SIZE)
            {
                prefixSum[localIdx + i] += prefixSum[localIdx];
            }

            barrier();
        }

        if (localIdx == 0) {
            result[workGroupIdx] = prefixSum[WORK_GROUP_SIZE - 1];
        }
    }
}