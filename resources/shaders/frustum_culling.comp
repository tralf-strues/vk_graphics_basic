#version 430

layout( local_size_x = 32 ) in;

struct VkDrawIndexedIndirectCommand {
    uint    indexCount;
    uint    instanceCount;
    uint    firstIndex;
    int     vertexOffset;
    uint    firstInstance;
};

struct Camera {
  mat4 view_projection;
};

struct AABB {
  vec4 minPoint;
  vec4 maxPoint;
};

bool Within(float rangeA, float test, float rangeB) {
    return (rangeA <= test) && (test <= rangeB);
}

bool TestAABB(in mat4 mvp, in AABB aabb) {
    // Use our min max to define eight corners
    vec4 corners[8] = {
        {aabb.minPoint.x, aabb.minPoint.y, aabb.minPoint.z, 1.0}, // x y z
        {aabb.maxPoint.x, aabb.minPoint.y, aabb.minPoint.z, 1.0}, // X y z
        {aabb.minPoint.x, aabb.maxPoint.y, aabb.minPoint.z, 1.0}, // x Y z
        {aabb.maxPoint.x, aabb.maxPoint.y, aabb.minPoint.z, 1.0}, // X Y z

        {aabb.minPoint.x, aabb.minPoint.y, aabb.maxPoint.z, 1.0}, // x y Z
        {aabb.maxPoint.x, aabb.minPoint.y, aabb.maxPoint.z, 1.0}, // X y Z
        {aabb.minPoint.x, aabb.maxPoint.y, aabb.maxPoint.z, 1.0}, // x Y Z
        {aabb.maxPoint.x, aabb.maxPoint.y, aabb.maxPoint.z, 1.0}, // X Y Z
    };

    bool inside = false;

    for (int corner_idx = 0; corner_idx < 8; corner_idx++) {
        vec4 corner = mvp * corners[corner_idx];
        // Check vertex against clip space bounds
        inside = inside ||
            Within(-corner.w, corner.x, corner.w) &&
            Within(-corner.w, corner.y, corner.w) &&
            Within(0.0f, corner.z, corner.w);
    }

    return inside;
}

layout(push_constant) uniform params {
    Camera camera;
    AABB aabb;
    uint instances_total;
};

layout(std430, binding = 0) buffer IndirectDrawBuffer {
    VkDrawIndexedIndirectCommand draw_cmd;
};

layout(std430, binding = 1) readonly buffer Transforms {
    mat4 instance_transform[];
};

layout(std430, binding = 2) buffer VisibleInstanceIndices {
    uint visible_instance_ids[];
};

void main() {
    uint g_id = gl_GlobalInvocationID.x;

    if (g_id == 0) {
        draw_cmd.instanceCount = 0;
    }

    barrier();

	if(g_id < instances_total) {
        mat4 mvp = camera.view_projection * instance_transform[g_id];

        if (TestAABB(mvp, aabb)) {
            uint idx = atomicAdd(draw_cmd.instanceCount, 1);
            visible_instance_ids[idx] = g_id;
        }
	}
}